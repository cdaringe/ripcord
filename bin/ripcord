#!/usr/bin/env node

'use strict'

const app = require('../src/app')
const program = require('commander')
const path = require('path')
const pkgPath = path.resolve(__dirname, '../package.json')
const pkg = require(pkgPath)
const ripcord = require('../src/')
const counsel = require('counsel')
const postProcessReport = require('./post-process-report')

// CLI command metadata. `name` refers to a corresponding function in
// ripcord's library entry point (ref, src/index.js)
let action = { name: null, arg: null, options: null }

// attempt usage of local ripcord, if present
try {
  let localRipcordFilneame = path.join(process.cwd(), 'node_modules', 'ripcord', "bin", "ripcord")
	localRipcordFilneame = require.resolve(localRipcordFilneame)
	if(__filename !== localWebpack) return require(localWebpack)
} catch(err) { /* pass */ }

// expose and digest CLI
program
  .option('-l, --log-level [error|warn|info|verbose|debug|silly]', 'set the log level. default info')
  .option('--verbose', 'set the log level to verbose')

program
  .command('report [arg]')
  .option('-o, --output [path]', 'path to dump the report')
  .description('generate tripwire dependency report')
  .action((arg, opts) => { action = { name: 'report', arg: arg, options: opts } })

program
  .command('counsel [apply|check]')
  .description('deploy tripwire project conventions via counsel')
  .action((arg, opts) => { action = { name: 'counsel', arg: arg, options: opts } })

program.parse(process.argv)

// process command line input
const noArgsPassed = !program.args || program.args.length === 0
const isValidArg = program.args && program.args[1] ? program.args[1] instanceof program.Command : false
if (noArgsPassed || !isValidArg) {
  program.help((txt) => {
    ripcord.logger.error('Invalid arguments provided')
    console.log(txt)
    process.exit(1)
  })
}

// configure logger
counsel.logger.transports.console.level = program.verbose ? 'verbose' : program.logLevel || app.logLevel
ripcord.logger.setLogLevel(program.logLevel || app.logLevel)

// go.
const cmdP = ripcord[action.name].apply(ripcord, [action.arg, action.options])
Promise.resolve(cmdP)
.then(result => {
  if (action.name === 'report') postProcessReport(action, result)
})

module.exports = program
